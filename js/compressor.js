// Ëé∑Âèñ DOM ÂÖÉÁ¥†
const uploadArea = document.getElementById('uploadArea');
const fileInput = document.getElementById('fileInput');
const operationSelect = document.getElementById('operationSelect');
const processAllBtn = document.getElementById('processAllBtn');
const downloadAllBtn = document.getElementById('downloadAllBtn');
const clearAllBtn = document.getElementById('clearAllBtn');
const statusText = document.getElementById('statusText');
const noZipWarning = document.getElementById('noZipWarning');
const previewContainer = document.getElementById('previewContainer');

// Êñá‰ª∂Êï∞ÁªÑ
let files = [];

// Êõ¥Êñ∞ UI Áä∂ÊÄÅ
function updateUI() {
    if (files.length > 0) {
        processAllBtn.disabled = false;
        downloadAllBtn.disabled = false;
        clearAllBtn.disabled = false;
        renderPreviews();
    } else {
        processAllBtn.disabled = true;
        downloadAllBtn.disabled = true;
        clearAllBtn.disabled = true;
        previewContainer.innerHTML = '';
    }
}

// ==================== ÂìçÂ∫îÂºèÊåâÈíÆÁªÑ ====================
// ÂàõÂª∫ÊåâÈíÆÂÆπÂô®
const buttonGroup = document.createElement('div');
Object.assign(buttonGroup.style, {
    position: 'fixed',
    bottom: '20px',
    right: '20px',
    zIndex: '1000',
    display: 'flex',
    gap: '15px',
    transition: 'all 0.3s ease'
});

// ÈªëÊöóÊ®°ÂºèÂàáÊç¢ÊåâÈíÆ
const darkModeToggle = document.createElement('button');
darkModeToggle.textContent = 'üåô ÈªëÊöóÊ®°Âºè';
Object.assign(darkModeToggle.style, {
    padding: '8px 16px',
    borderRadius: '20px',
    backgroundColor: '#333',
    color: 'white',
    border: 'none',
    cursor: 'pointer',
    boxShadow: '0 2px 10px rgba(0,0,0,0.2)',
    whiteSpace: 'nowrap',
    transition: 'all 0.3s ease'
});

// ÂÖ®ÈÉ®Â∑•ÂÖ∑ÊåâÈíÆ
const allToolsButton = document.createElement('button');
allToolsButton.textContent = 'È¶ñÈ°µ';
Object.assign(allToolsButton.style, {
    padding: '8px 16px',
    borderRadius: '20px',
    backgroundColor: '#333',
    color: 'white',
    border: 'none',
    cursor: 'pointer',
    boxShadow: '0 2px 10px rgba(0,0,0,0.2)',
    whiteSpace: 'nowrap',
    transition: 'all 0.3s ease'
});

// ÂìçÂ∫îÂºèÂ∏ÉÂ±ÄÂáΩÊï∞
const updateButtonLayout = () => {
    const isMobile = window.innerWidth <= 768;
    
    if (isMobile) {
        // ÁßªÂä®Á´ØÂ∏ÉÂ±Ä
        buttonGroup.style.flexDirection = 'column-reverse';
        buttonGroup.style.alignItems = 'flex-end';
        buttonGroup.style.bottom = '10px';
        buttonGroup.style.right = '10px';
        buttonGroup.style.gap = '10px';
        
        // ÊåâÈíÆÂ∞∫ÂØ∏Ë∞ÉÊï¥
        [darkModeToggle, allToolsButton].forEach(btn => {
            btn.style.padding = '6px 12px';
            btn.style.fontSize = '14px';
        });
    } else {
        // Ê°åÈù¢Á´ØÂ∏ÉÂ±Ä
        buttonGroup.style.flexDirection = 'row';
        buttonGroup.style.bottom = '20px';
        buttonGroup.style.right = '20px';
        buttonGroup.style.gap = '15px';
        
        // ÊÅ¢Â§çÈªòËÆ§Â∞∫ÂØ∏
        [darkModeToggle, allToolsButton].forEach(btn => {
            btn.style.padding = '8px 16px';
            btn.style.fontSize = '16px';
        });
    }
};

// ÂàùÂßãÂåñÂ∏ÉÂ±Ä
updateButtonLayout();
window.addEventListener('resize', updateButtonLayout);

// Ê∑ªÂä†ÊåâÈíÆÂà∞ÂÆπÂô®
buttonGroup.appendChild(allToolsButton);
buttonGroup.appendChild(darkModeToggle);
document.body.appendChild(buttonGroup);

// ==================== ÈªëÊöóÊ®°ÂºèÂäüËÉΩ ====================
let darkMode = false;
darkModeToggle.addEventListener('click', function() {
    darkMode = !darkMode;
    document.body.classList.toggle('dark-mode', darkMode);
    
    // Âä®ÊÄÅÊõ¥Êñ∞ÊåâÈíÆÊ†∑Âºè
    this.textContent = darkMode ? '‚òÄÔ∏è Êòé‰∫ÆÊ®°Âºè' : 'üåô ÈªëÊöóÊ®°Âºè';
    this.style.backgroundColor = darkMode ? '#fff' : '#333';
    this.style.color = darkMode ? '#333' : '#fff';
    
    // ÂêåÊ≠•ÂÖ®ÈÉ®Â∑•ÂÖ∑ÊåâÈíÆÊ†∑Âºè
    allToolsButton.style.backgroundColor = darkMode ? '#444' : '#333';
    allToolsButton.style.color = darkMode ? '#eee' : '#fff';
});

// ==================== ÈªëÊöóÊ®°ÂºèÂÖ®Â±ÄÊ†∑Âºè ====================
const darkModeStyles = document.createElement('style');
darkModeStyles.textContent = `
.dark-mode {
    background: linear-gradient(135deg, #1a1a1a, #2d2d2d);
    color: #f0f0f0;
}

.dark-mode .container {
    background-color: #2d2d2d;
    border: 1px solid #444;
}

.dark-mode input,
.dark-mode select,
.dark-mode button:not(.dark-mode-toggle) {
    background-color: #444;
    color: #fff;
    border-color: #555;
}

.dark-mode .progress-bar {
    background-color: #555;
}

@media (max-width: 768px) {
    .dark-mode .button-group {
        background: rgba(40, 40, 40, 0.9);
        backdrop-filter: blur(5px);
    }
}
`;
document.head.appendChild(darkModeStyles);

// ==================== ÂÖ®ÈÉ®Â∑•ÂÖ∑ÊåâÈíÆÂäüËÉΩ ====================
allToolsButton.addEventListener('click', () => {
    window.location.href = 'index.html';
});

// ==================== Ëß¶Êë∏‰ºòÂåñ ====================
// Ê∑ªÂä†Ëß¶Êë∏ÂèçÈ¶à
[allToolsButton, darkModeToggle].forEach(btn => {
    btn.addEventListener('touchstart', () => {
        btn.style.transform = 'scale(0.95)';
    });
    
    btn.addEventListener('touchend', () => {
        btn.style.transform = 'scale(1)';
    });
});

// ==================== Êó†ÈöúÁ¢ç‰ºòÂåñ ====================
allToolsButton.setAttribute('aria-label', 'ËøîÂõûÂÖ®ÈÉ®Â∑•ÂÖ∑È°µÈù¢');
darkModeToggle.setAttribute('aria-label', 'ÂàáÊç¢ÈªëÊöóÊ®°Âºè');
buttonGroup.setAttribute('role', 'toolbar');

// Ê∏≤ÊüìÈ¢ÑËßà
function renderPreviews() {
    previewContainer.innerHTML = '';

    files.forEach((file, index) => {
        const card = document.createElement('div');
        card.className = 'file-card';

        const info = document.createElement('div');
        info.className = 'file-info';

        const name = document.createElement('div');
        name.className = 'file-name';
        name.textContent = file.name;

        const size = document.createElement('div');
        size.className = 'file-size';
        size.textContent = formatFileSize(file.size);

        const actions = document.createElement('div');
        actions.className = 'action-buttons small';

        const processBtn = document.createElement('button');
        processBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 5px;">
                <path d="M21 3H3v18h18V3z"></path>
                <path d="M21 12H9"></path>
                <path d="M12 3v18"></path>
            </svg>
            Â§ÑÁêÜ
        `;

        processBtn.addEventListener('click', () => processSingleFile(index));

        const downloadBtn = document.createElement('button');
        downloadBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 5px;">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                <polyline points="7 10 12 15 17 10"></polyline>
                <line x1="12" y1="15" x2="12" y2="3"></line>
            </svg>
            ‰∏ãËΩΩ
        `;
        downloadBtn.addEventListener('click', () => downloadSingleFile(index));

        const removeBtn = document.createElement('button');
        removeBtn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 5px;">
                <polyline points="3 6 5 6 21 6"></polyline>
                <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
            </svg>
            ÁßªÈô§
        `;
        removeBtn.addEventListener('click', () => {
            files.splice(index, 1);
            updateUI();
            statusText.textContent = `Â∑≤ÁßªÈô§Êñá‰ª∂ "${file.name}"`;
        });

        actions.appendChild(processBtn);
        actions.appendChild(downloadBtn);
        actions.appendChild(removeBtn);

        card.appendChild(info);
        card.appendChild(actions);

        previewContainer.appendChild(card);
    });
}

// Â§ÑÁêÜÂçï‰∏™Êñá‰ª∂
function processSingleFile(index) {
    const file = files[index];
    const operation = operationSelect.value;

    if (operation === 'compress') {
        // ÂéãÁº©ÈÄªËæë
        // ËøôÈáåÈúÄË¶Å‰ΩøÁî®Áõ∏Â∫îÁöÑÂéãÁº©Â∫ìÔºåÂ¶Ç JSZip Â§ÑÁêÜ ZIP ÂéãÁº©
        // Á§∫‰æã‰ª£Á†ÅÔºö
        const zip = new JSZip();
        zip.file(file.name, file);
        zip.generateAsync({ type: 'blob' }).then((blob) => {
            const newDataUrl = URL.createObjectURL(blob);
            file.processedData = newDataUrl;
            file.processedFile = new File([blob], `${file.name.replace(/\.[^/.]+$/, '')}.zip`, { type: 'application/zip' });
            statusText.textContent = `Êñá‰ª∂ "${file.name}" Â∑≤ÂéãÁº©`;
        });
    } else if (operation === 'decompress') {
        // Ëß£ÂéãÈÄªËæë
        // ËøôÈáåÈúÄË¶Å‰ΩøÁî®Áõ∏Â∫îÁöÑËß£ÂéãÂ∫ìÔºåÂ¶Ç JSZip Â§ÑÁêÜ ZIP Ëß£Âéã
        // Á§∫‰æã‰ª£Á†ÅÔºö
        JSZip.loadAsync(file).then((zip) => {
            const promises = [];
            zip.forEach((relativePath, zipEntry) => {
                promises.push(zipEntry.async('blob').then((blob) => {
                    const newFile = new File([blob], relativePath, { type: zipEntry.mimeType });
                    // Â§ÑÁêÜËß£ÂéãÂêéÁöÑÊñá‰ª∂
                    // ËøôÈáåÂèØ‰ª•Â∞ÜËß£ÂéãÂêéÁöÑÊñá‰ª∂Ê∑ªÂä†Âà∞Êüê‰∏™ÂàóË°®‰∏≠
                }));
            });
            Promise.all(promises).then(() => {
                statusText.textContent = `Êñá‰ª∂ "${file.name}" Â∑≤Ëß£Âéã`;
            });
        });
    }
}

// ‰∏ãËΩΩÂçï‰∏™Êñá‰ª∂
function downloadSingleFile(index) {
    const file = files[index];
    const dataUrl = file.processedData || URL.createObjectURL(file);
    const fileName = file.processedFile ? file.processedFile.name : file.name;

    const a = document.createElement('a');
    a.href = dataUrl;
    a.download = fileName;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);

    statusText.textContent = `Â∑≤‰∏ãËΩΩÊñá‰ª∂ "${fileName}"`;
}

// Â§ÑÁêÜ‰∏ä‰º†ÁöÑÊñá‰ª∂
function handleFiles(selectedFiles) {
    const validFiles = Array.from(selectedFiles).filter(file => ['.zip', '.rar', '.7z'].some(ext => file.name.endsWith(ext)));

    if (validFiles.length === 0) {
        statusText.textContent = 'Ê≤°ÊúâÈÄâÊã©ÊúâÊïàÁöÑÂéãÁº©Êñá‰ª∂';
        return;
    }

    statusText.textContent = `Ê≠£Âú®Âä†ËΩΩ ${validFiles.length} ‰∏™Êñá‰ª∂...`;

    files = files.concat(validFiles);
    updateUI();
    statusText.textContent = `Â∑≤Âä†ËΩΩ ${validFiles.length} ‰∏™Êñá‰ª∂`;
}

// ËæÖÂä©ÂáΩÊï∞ÔºöÊ†ºÂºèÂåñÊñá‰ª∂Â§ßÂ∞è
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// ‰∏ä‰º†Âå∫ÂüüÁÇπÂáª‰∫ã‰ª∂
uploadArea.addEventListener('click', () => {
    fileInput.click();
});

// Êñá‰ª∂ÈÄâÊã©‰∫ã‰ª∂
fileInput.addEventListener('change', () => {
    handleFiles(fileInput.files);
});

// ‰∏ä‰º†Âå∫ÂüüÊãñÊãΩ‰∫ã‰ª∂
uploadArea.addEventListener('dragover', (e) => {
    e.preventDefault();
    uploadArea.classList.add('active');
});

uploadArea.addEventListener('dragleave', () => {
    uploadArea.classList.remove('active');
});

uploadArea.addEventListener('drop', (e) => {
    e.preventDefault();
    uploadArea.classList.remove('active');
    handleFiles(e.dataTransfer.files);
});

// Â§ÑÁêÜÊâÄÊúâÊñá‰ª∂ÊåâÈíÆÁÇπÂáª‰∫ã‰ª∂
processAllBtn.addEventListener('click', () => {
    files.forEach((_, index) => {
        processSingleFile(index);
    });
    statusText.textContent = `Ê≠£Âú®Â§ÑÁêÜ ${files.length} ‰∏™Êñá‰ª∂...`;
});

// ‰∏ãËΩΩÊâÄÊúâÊñá‰ª∂ÊåâÈíÆÁÇπÂáª‰∫ã‰ª∂
downloadAllBtn.addEventListener('click', () => {
    if (typeof JSZip === 'undefined') {
        noZipWarning.style.display = 'block';
        downloadFilesIndividually();
    } else {
        // ÊâìÂåÖ‰∏ãËΩΩÊâÄÊúâÊñá‰ª∂
        const zip = new JSZip();
        files.forEach((file) => {
            if (file.processedFile) {
                zip.file(file.processedFile.name, file.processedFile);
            }
        });
        zip.generateAsync({ type: 'blob' }).then((blob) => {
            const dataUrl = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = dataUrl;
            a.download = 'all_files.zip';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            statusText.textContent = `Â∑≤‰∏ãËΩΩÊâÄÊúâÂ§ÑÁêÜÂêéÁöÑÊñá‰ª∂`;
        });
    }
});

// Ê∏ÖÈô§ÊâÄÊúâÊñá‰ª∂ÊåâÈíÆÁÇπÂáª‰∫ã‰ª∂
clearAllBtn.addEventListener('click', () => {
    files = [];
    updateUI();
    statusText.textContent = 'Â∑≤Ê∏ÖÈô§ÊâÄÊúâÊñá‰ª∂ÔºåÂáÜÂ§áÂ∞±Áª™ÔºåËØ∑‰∏ä‰º†Êñá‰ª∂';
});

// Â¶ÇÊûúÊ≤°Êúâ JSZipÔºåÈÄê‰∏™‰∏ãËΩΩÊñá‰ª∂
function downloadFilesIndividually() {
    let delay = 0;

    files.forEach((_, index) => {
        setTimeout(() => {
            downloadSingleFile(index);
        }, delay);
        delay += 300; // ÊØè‰∏™‰∏ãËΩΩÈó¥Èöî 300ms
    });
    statusText.textContent = `Ê≠£Âú®ÈÄê‰∏™‰∏ãËΩΩ ${files.length} ‰∏™Êñá‰ª∂...`;
}

